version: 2.1.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - appveyor
#   - master
#   - production
# Do not build on tags (GitHub and BitBucket)
skip_tags: true
os: Visual Studio 2015
configuration: Release
platform: Any CPU
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'
environment:
    palette_robot_ssh_priv_key:
        secure: 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

services:
  - postgresql101
build_script:
  - set INSTALLER_RELATIVE_PATH=PaletteInsightAgentServiceInstaller\bin\Release
  - set INSTALLER_DIR=%APPVEYOR_BUILD_FOLDER%\%INSTALLER_RELATIVE_PATH%
  - nuget.exe sources Add -Name LeDotNetProjectFeed -Source https://ci.appveyor.com/nuget/le-dotnet-hslfeubjh9oe
  - nuget.exe restore

  # Get insight-tester and unzip it. It is needed for the github-downlaoder
  - mkdir %INSTALLER_DIR%
  - ps: (New-Object Net.WebClient).DownloadFile('https://github.com/palette-software/dl-github-release/releases/download/v1.0.1/windows_amd64.zip', $env:INSTALLER_DIR+'\windows_amd64.zip')
  - ps: dir $env:INSTALLER_DIR
  - echo "Downloaded Github Private Release Downloader"
  - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:INSTALLER_DIR+'\windows_amd64.zip', $env:INSTALLER_DIR);
  - echo "Unzipped Github Private Release Downloader"
  - del %INSTALLER_DIR%\windows_amd64.zip

  # Use github downloader to get latest palette-updater release
  - dir %INSTALLER_DIR%
  - dir %INSTALLER_DIR%\windows_amd64
  - PaletteInsightAgentServiceInstaller\bin\Release\windows_amd64\dl-github-release.exe palette-software palette-updater %GITHUB_TOKEN%
  - copy *.zip %INSTALLER_DIR%

  # Unzip palette-updater to the appropriate place
  - mkdir %APPVEYOR_BUILD_FOLDER%\PaletteInsightAgentService\bin\Release
  - ps: $env:UPDATER_ZIP = get-childitem $env:installer_dir | where {$_.extension -eq ".zip"}
  - ps: $env:UPDATER_ZIP = $env:INSTALLER_DIR + '\' + $env:UPDATER_ZIP
  - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:UPDATER_ZIP, $env:APPVEYOR_BUILD_FOLDER+'\PaletteInsightAgentService\bin\Release');
  - dir %APPVEYOR_BUILD_FOLDER%\PaletteInsightAgentService\bin\Release

  # Actually build Palette Insight Agent
  - '"C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe" "PaletteInsightAgent.sln" /verbosity:minimal /p:Configuration=Release /p:Platform="Mixed Platforms" /t:Clean /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"'

  - '"C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe" "PaletteInsightAgent.sln" /verbosity:minimal /p:Configuration=Release /p:Platform="Mixed Platforms"  /t:Build /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"'

  ## Sign the installer
  - '"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" sign /t http://timestamp.digicert.com /f "starschema.pfx" /p %PFX_PASS% "%INSTALLER_RELATIVE_PATH%\PaletteInsightAgent.msi"'

  - move %INSTALLER_RELATIVE_PATH%\PaletteInsightAgent.msi %INSTALLER_RELATIVE_PATH%\Palette-Insight-v%APPVEYOR_BUILD_VERSION%-installer.msi

test_script:
    # Run the unit tests first
    - vstest.console /logger:Appveyor "%APPVEYOR_BUILD_FOLDER%\test\PaletteInsightAgent.UnitTests\bin\Release\PaletteInsightAgent.UnitTests.dll"

    # Setup Postgres 9.3 on the worker
    - SET PGUSER=postgres
    - SET PGPASSWORD=Password12!
    - PATH=C:\Program Files\PostgreSQL\10\bin\;%PATH%
    - createdb workgroup
    # Setup target database
    - createdb palette
    - psql -a -c "create user palette with password 'password';"
    - psql -a -c "grant all on database palette to palette;"
    # Setup fake Tableau database
    - psql -a -c "create user readonly with password 'onlyread';"
    - psql -a -c "grant all on database workgroup to readonly;"
    - SET PGUSER=readonly
    - SET PGPASSWORD=onlyread
    - psql -a -c "CREATE TABLE core_licenses ( allocated_cores integer );" -d workgroup
    - psql -a -c "INSERT INTO core_licenses VALUES (64);" -d workgroup
    # # And create the target tables, since the agent does not do that anymore on its own
    # - SET PGUSER=palette
    # - SET PGPASSWORD=password
    # - psql -d palette -f create_tables_pg.sql
    # - echo "Postgres database setup completed"

    # Setup SSH key to Github
    # - ps: $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
    # - ps: $fileContent += $env:palette_robot_ssh_priv_key.Replace(' ', "`n")
    # - ps: $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
    # - ps: Set-Content c:\users\appveyor\.ssh\id_rsa $fileContent

    # Make and run an Insight Server locally
    # First create a go workspace
    - SET GOPATH=c:\go-workspace
    - SET GOPAL=%GOPATH%\src\gitlab.com\brilliant-data
    - md %GOPAL%
    - git clone --depth 1 git@gitlab.com:brilliant-data/palette-insight-next.git %GOPAL%\palette-insight-next
    - cd %GOPAL%\palette-insight-next\server
    - SET SERVER_GO_PATH=gitlab.com\brilliant-data\palette-insight-next\server
    # Make sure 'go get' use the SSH key for downloading private repos, instead of HTTPS
    # - git config --global url."git@github.com:".insteadOf "https://github.com/"
    - go get %SERVER_GO_PATH%
    - go install %SERVER_GO_PATH%
    - echo license_key=%INSIGHT_AUTH_TOKEN% > %GOPATH%\bin\license.config
    - cd %GOPATH%\bin
    # Start Insight Server in the background
    - ps: Start-Process server.exe -ArgumentList "--config license.config"

    # Make a sample run of Palette Insight Agent
    - echo "Try a Palette Insight install and uninstall"
    - cd %INSTALLER_DIR%
    - set PALIN_MSI=Palette-Insight-v%APPVEYOR_BUILD_VERSION%-installer.msi
    # Prepare the license file for the installer to use
    - msiexec.exe /qn /i %PALIN_MSI%
    - echo "Installed Palette Insight successfully"
    # Prepare the config.yml file
    - SET CONFIG_YML_PATH="C:\Program Files (x86)\Palette Insight Agent\Config\Config.yml"
    - copy /Y "%APPVEYOR_BUILD_FOLDER%\test\configs\Config_AppVeyor.yml" %CONFIG_YML_PATH%
    # Add the Insight Auth Token into the Config.yml
    - cmd: >-
        echo InsightAuthToken: %INSIGHT_AUTH_TOKEN% >> %CONFIG_YML_PATH%

    # Disable Splunk logging in the insight agent
    - ps: >-
        $nlog_config_path = "C:\Program Files (x86)\Palette Insight Agent\NLog.config";
        (Get-Content $nlog_config_path) | ForEach-Object { $_ -replace "writeTo=`"palette_alerts, splunk`"", "writeTo=`"palette_alerts`"" } | Set-Content $nlog_config_path;

    # Create fake Tableau data and serverlog folders
    - ps: >-
        $fake_tableau_data_folder = "c:\FakeTableau\data";
        New-Item -Path "HKLM:\SOFTWARE\Tableau\Tableau Server 10.0" -Name "Directories" -Force;
        New-ItemProperty -Path "HKLM:\SOFTWARE\Tableau\Tableau Server 10.0\Directories" -Name "Data" -PropertyType "String" -Value $fake_tableau_data_folder;
        $watched_folder = "$fake_tableau_data_folder\tabsvc\vizqlserver\Logs";
        md $watched_folder;
        md "$fake_tableau_data_folder\tabsvc\vizqlserver\Logs" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\vizqlserver" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\vizqlserver" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\dataengine" -Force;

    # Create fake workgroup.yml and connections.yml
    - ps: >-
        md $fake_tableau_data_folder\tabsvc\config;
        $fileContent = "---`n";
        $fileContent += "pgsql.connections.yml: $fake_tableau_data_folder\tabsvc\config\connections.yml`n";
        $fileContent += "pgsql.readonly.enabled: true`n";
        $fileContent += "pgsql.readonly_password: onlyread`n";
        $fileContent += "pgsql.readonly_username: readonly`n";
        Set-Content $fake_tableau_data_folder\tabsvc\config\workgroup.yml $fileContent;

        $fileContent = "---`n";
        $fileContent += "pgsql.host: localhost`n";
        $fileContent += "pgsql.port: 8060`n";
        Set-Content $fake_tableau_data_folder\tabsvc\config\connections.yml $fileContent;

    # Acquire example serverlogs from our S3 'palette-insight-test' bucket
    - ps: (New-Object Net.WebClient).DownloadFile('https://palette-rpm.brilliant-data.net/test/example_serverlogs.zip', $env:INSTALLER_DIR+'\example_serverlogs.zip')
    - echo "Downloaded example_serverlogs.zip"
    # Stop the watchdog service, so that we can avoid unwanted agent updates during smoke test run
    - ps: Stop-Service -Name PaletteInsightWatchdog -ErrorAction SilentlyContinue
    - ps: Start-Service -Name PaletteInsightAgent
    - echo "Started PaletteInsightAgent service"
    - sleep 4
    - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:INSTALLER_DIR+'\example_serverlogs.zip', $watched_folder);
    - sleep 13
    - echo "Sleeping for 17 seconds"
    - ps: Stop-Service -Name PaletteInsightAgent -ErrorAction SilentlyContinue
    - echo "End of PaletteInsightAgent log"
    - ps: >-
        If (Select-String -Pattern 'ERROR','FATAL' -CaseSensitive -SimpleMatch -Path "C:\Program Files (x86)\Palette Insight Agent\Logs\PaletteInsightAgent.nlog.txt") {
          Write-Host "ERROR or FATAL found in log. Exiting with code 1"
          exit 1
        }
    # - echo "Checking DB contents"
    # - ps: (New-Object Net.WebClient).DownloadFile('https://github.com/palette-software/insight-tester/raw/master/appveyor_tests.json', $env:INSTALLER_DIR+'\appveyor_tests.json')
    # - windows_amd64\dbcheck.exe appveyor_tests.json "C:\Program Files (x86)\Palette Insight Agent\Config\Config.yml"
    - msiexec.exe /qn /x %PALIN_MSI%
    - echo "Uninstalled Palette Insight successfully"
    # - echo "Starting SMOKE test on GoCD"
    # - curl 'https://gocd-server.palette-software.net:8154/go/api/pipelines/smoke/schedule' -u "gocd-admin:%GOCDPASS%" -X POST --insecure
artifacts:
- path: PaletteInsightAgentServiceInstaller\bin\Release\*.msi
  name: Github
deploy:
- provider: GitHub
  tag: v$(appveyor_build_version)
  release: Palette Insight Agent v$(appveyor_build_version)
  auth_token:
    secure: fH3VyHRwhHuNlPwPsOwljTRqYqluyuddBTfcmUn98GBdAOMQbnjcRjjIcYH/Qp6Q
  draft: false
  prerelease: false
  on:
    branch: master
after_deploy:
- ps: iex "$env:APPVEYOR_BUILD_FOLDER\trigger-travis.ps1 $env:APPVEYOR_BUILD_VERSION $env:APPVEYOR_REPO_BRANCH $env:PALETTE_ROBOT_TRAVIS_TOKEN"

# notifications:
# - provider: Slack
#   incoming_webhook: <HOOK>
#   auth_token:
#     secure: <TOKEN>
#   channel: dev-robots
#   on_build_success: true
#   on_build_failure: true
#   on_build_status_changed: true

on_finish:
    # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - echo "Contents of the PaletteInsightAgent log"
  - type "C:\Program Files (x86)\Palette Insight Agent\Logs\PaletteInsightAgent.nlog.txt"

