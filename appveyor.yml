version: 3.0.{build}
pull_requests:
  do_not_increment_build_number: true
branches:
  only:
  - master
# Do not build on tags (GitHub and BitBucket)
skip_tags: true
os: Visual Studio 2015
configuration: Release
platform: Any CPU
assembly_info:
  patch: true
  file: '**\AssemblyInfo.*'
  assembly_version: '{version}'
  assembly_file_version: '{version}'
  assembly_informational_version: '{version}'

services:
  - postgresql101
build_script:
  - set INSTALLER_RELATIVE_PATH=PaletteInsightAgentServiceInstaller\bin\Release
  - set INSTALLER_DIR=%APPVEYOR_BUILD_FOLDER%\%INSTALLER_RELATIVE_PATH%
  # For Logentries:
  - nuget.exe sources Add -Name LeDotNetProjectFeed -Source https://ci.appveyor.com/nuget/le-dotnet-hslfeubjh9oe
  - nuget.exe restore

  # Get insight-tester and unzip it. It is needed for the github-downlaoder
  - mkdir %INSTALLER_DIR%
  - ps: (New-Object Net.WebClient).DownloadFile('https://github.com/palette-software/dl-github-release/releases/download/v1.0.1/windows_amd64.zip', $env:INSTALLER_DIR+'\windows_amd64.zip')
  - ps: dir $env:INSTALLER_DIR
  - echo "Downloaded Github Private Release Downloader"
  - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:INSTALLER_DIR+'\windows_amd64.zip', $env:INSTALLER_DIR);
  - echo "Unzipped Github Private Release Downloader"
  - del %INSTALLER_DIR%\windows_amd64.zip

  # Use github downloader to get latest palette-updater release
  - dir %INSTALLER_DIR%
  - dir %INSTALLER_DIR%\windows_amd64
  - PaletteInsightAgentServiceInstaller\bin\Release\windows_amd64\dl-github-release.exe palette-software palette-updater %GITHUB_TOKEN%
  - copy *.zip %INSTALLER_DIR%

  # Unzip palette-updater to the appropriate place
  - mkdir %APPVEYOR_BUILD_FOLDER%\PaletteInsightAgentService\bin\Release
  - ps: $env:UPDATER_ZIP = get-childitem $env:installer_dir | where {$_.extension -eq ".zip"}
  - ps: $env:UPDATER_ZIP = $env:INSTALLER_DIR + '\' + $env:UPDATER_ZIP
  - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:UPDATER_ZIP, $env:APPVEYOR_BUILD_FOLDER+'\PaletteInsightAgentService\bin\Release');
  - dir %APPVEYOR_BUILD_FOLDER%\PaletteInsightAgentService\bin\Release

  # Actually build Palette Insight Agent
  - '"C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe" "PaletteInsightAgent.sln" /verbosity:minimal /p:Configuration=Release /p:Platform="Mixed Platforms" /t:Clean /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"'

  - '"C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe" "PaletteInsightAgent.sln" /verbosity:minimal /p:Configuration=Release /p:Platform="Mixed Platforms"  /t:Build /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"'

  ## Sign the installer
  - '"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" sign /t http://timestamp.digicert.com /f "starschema.pfx" /p %PFX_PASS% "%INSTALLER_RELATIVE_PATH%\PaletteInsightAgent.msi"'

  - move %INSTALLER_RELATIVE_PATH%\PaletteInsightAgent.msi %INSTALLER_RELATIVE_PATH%\Palette-Insight-v%APPVEYOR_BUILD_VERSION%-installer.msi

test_script:
    # Run the unit tests first
    - vstest.console /logger:Appveyor "%APPVEYOR_BUILD_FOLDER%\test\PaletteInsightAgent.UnitTests\bin\Release\PaletteInsightAgent.UnitTests.dll"

    # Setup Postgres 9.3 on the worker
    - SET PGUSER=postgres
    - SET PGPASSWORD=Password12!
    - PATH=C:\Program Files\PostgreSQL\10\bin\;%PATH%
    - createdb workgroup
    # Setup target database
    - createdb palette
    - psql -a -c "create user palette with password 'password';"
    - psql -a -c "grant all on database palette to palette;"
    # Setup fake Tableau database
    - psql -a -c "create user readonly with password 'onlyread';"
    - psql -a -c "grant all on database workgroup to readonly;"
    - SET PGUSER=readonly
    - SET PGPASSWORD=onlyread
    - psql -a -c "CREATE TABLE core_licenses ( allocated_cores integer );" -d workgroup
    - psql -a -c "INSERT INTO core_licenses VALUES (64);" -d workgroup
    # # And create the target tables, since the agent does not do that anymore on its own
    # - SET PGUSER=palette
    # - SET PGPASSWORD=password
    # - psql -d palette -f create_tables_pg.sql
    # - echo "Postgres database setup completed"

    # Make and run an Insight Server locally
    # First create a go workspace
    - SET GOPATH=c:\go-workspace
    - SET GOPAL=%GOPATH%\src\gitlab.com\brilliant-data
    - md %GOPAL%
    - git clone --depth 1 git@gitlab.com:brilliant-data/palette-insight-next.git %GOPAL%\palette-insight-next
    - cd %GOPAL%\palette-insight-next\server
    - SET SERVER_GO_PATH=gitlab.com\brilliant-data\palette-insight-next\server
    - go get %SERVER_GO_PATH%
    - go install %SERVER_GO_PATH%
    - echo license_key=%INSIGHT_AUTH_TOKEN% > %GOPATH%\bin\license.config
    - cd %GOPATH%\bin
    # Start Insight Server in the background
    - ps: Start-Process server.exe -ArgumentList "--config license.config"

    # Make a sample run of Palette Insight Agent
    - echo "Try a Palette Insight install and uninstall"
    - cd %INSTALLER_DIR%
    - set PALIN_MSI=Palette-Insight-v%APPVEYOR_BUILD_VERSION%-installer.msi
    # Prepare the license file for the installer to use
    - msiexec.exe /qn /i %PALIN_MSI%
    - echo "Installed Palette Insight successfully"
    # Prepare the config.yml file
    - SET CONFIG_YML_PATH="C:\Program Files (x86)\Palette Insight Agent\Config\Config.yml"
    - copy /Y "%APPVEYOR_BUILD_FOLDER%\test\configs\Config_AppVeyor.yml" %CONFIG_YML_PATH%
    # Add the Insight Auth Token into the Config.yml
    - cmd: >-
        echo InsightAuthToken: %INSIGHT_AUTH_TOKEN% >> %CONFIG_YML_PATH%

    # Disable Splunk logging in the insight agent
    - ps: >-
        $nlog_config_path = "C:\Program Files (x86)\Palette Insight Agent\NLog.config";
        (Get-Content $nlog_config_path) | ForEach-Object { $_ -replace "writeTo=`"palette_alerts, splunk`"", "writeTo=`"palette_alerts`"" } | Set-Content $nlog_config_path;

    # Create fake Tableau data and serverlog folders
    - ps: >-
        $fake_tableau_data_folder = "c:\FakeTableau\data";
        New-Item -Path "HKLM:\SOFTWARE\Tableau\Tableau Server 10.0" -Name "Directories" -Force;
        New-ItemProperty -Path "HKLM:\SOFTWARE\Tableau\Tableau Server 10.0\Directories" -Name "Data" -PropertyType "String" -Value $fake_tableau_data_folder;
        $watched_folder = "$fake_tableau_data_folder\tabsvc\vizqlserver\Logs";
        md $watched_folder;
        md "$fake_tableau_data_folder\tabsvc\vizqlserver\Logs" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\vizqlserver" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\vizqlserver" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\dataengine" -Force;
        md "$fake_tableau_data_folder\tabsvc\logs\hyper" -Force;

    # Create fake workgroup.yml and connections.yml
    - ps: >-
        md $fake_tableau_data_folder\tabsvc\config;
        $fileContent = "---`n";
        $fileContent += "pgsql.connections.yml: $fake_tableau_data_folder\tabsvc\config\connections.yml`n";
        $fileContent += "pgsql.readonly.enabled: true`n";
        $fileContent += "pgsql.readonly_password: onlyread`n";
        $fileContent += "pgsql.readonly_username: readonly`n";
        Set-Content $fake_tableau_data_folder\tabsvc\config\workgroup.yml $fileContent;

        $fileContent = "---`n";
        $fileContent += "pgsql.host: localhost`n";
        $fileContent += "pgsql.port: 5432`n";
        Set-Content $fake_tableau_data_folder\tabsvc\config\connections.yml $fileContent;

    # Acquire example serverlogs from our S3 'palette-insight-test' bucket
    - ps: (New-Object Net.WebClient).DownloadFile('https://palette-rpm.brilliant-data.net/test/example_serverlogs.zip', $env:INSTALLER_DIR+'\example_serverlogs.zip')
    - echo "Downloaded example_serverlogs.zip"
    # Stop the watchdog service, so that we can avoid unwanted agent updates during smoke test run
    - ps: Stop-Service -Name PaletteInsightWatchdog -ErrorAction SilentlyContinue
    - ps: Start-Service -Name PaletteInsightAgent
    - echo "Started PaletteInsightAgent service"
    - sleep 4
    - ps: Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory($env:INSTALLER_DIR+'\example_serverlogs.zip', $watched_folder);
    - sleep 13
    - echo "Sleeping for 17 seconds"
    - ps: Stop-Service -Name PaletteInsightAgent -ErrorAction SilentlyContinue
    - echo "End of PaletteInsightAgent log"
    - ps: >-
        If (Select-String -Pattern 'ERROR','FATAL' -CaseSensitive -SimpleMatch -Path "C:\Program Files (x86)\Palette Insight Agent\Logs\PaletteInsightAgent.nlog.txt") {
          Write-Host "ERROR or FATAL found in log. Exiting with code 1"
          exit 1
        }
    # - echo "Checking DB contents"
    # - ps: (New-Object Net.WebClient).DownloadFile('https://github.com/palette-software/insight-tester/raw/master/appveyor_tests.json', $env:INSTALLER_DIR+'\appveyor_tests.json')
    # - windows_amd64\dbcheck.exe appveyor_tests.json "C:\Program Files (x86)\Palette Insight Agent\Config\Config.yml"
    - msiexec.exe /qn /x %PALIN_MSI%
    - echo "Uninstalled Palette Insight successfully"
artifacts:
- path: PaletteInsightAgentServiceInstaller\bin\Release\*.msi
  name: Next Agent v$(appveyor_build_version)
# deploy:
# - provider: GitHub
#   tag: v$(appveyor_build_version)
#   release: Palette Insight Agent v$(appveyor_build_version)
#   auth_token:
#     secure: fH3VyHRwhHuNlPwPsOwljTRqYqluyuddBTfcmUn98GBdAOMQbnjcRjjIcYH/Qp6Q
#   draft: false
#   prerelease: false
#   on:
#     branch: master
# after_deploy:
# - ps: iex "$env:APPVEYOR_BUILD_FOLDER\trigger-travis.ps1 $env:APPVEYOR_BUILD_VERSION $env:APPVEYOR_REPO_BRANCH $env:PALETTE_ROBOT_TRAVIS_TOKEN"

# notifications:
# - provider: Slack
#   incoming_webhook: <HOOK>
#   auth_token:
#     secure: <TOKEN>
#   channel: dev-robots
#   on_build_success: true
#   on_build_failure: true
#   on_build_status_changed: true

on_finish:
    # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - echo "Contents of the PaletteInsightAgent log"
  - type "C:\Program Files (x86)\Palette Insight Agent\Logs\PaletteInsightAgent.nlog.txt"
